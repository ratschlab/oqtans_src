This file documents the installation of Octave.

   Octave is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation.

   *Note:* This file is automatically generated from
`doc/interpreter/install.txi' in the Octave sources.  To update the
documentation make changes to the .txi source file rather than this
derived file.

1 Installing Octave
*******************

   The procedure for installing Octave from source on a Unix-like
system is described below.  Building on other platforms will follow
similar steps.

   * Run the shell script `configure'.  This will determine the features
     your system has (or doesn't have) and create a file named
     `Makefile' from each of the files named `Makefile.in'.

     Here is a summary of the configure options that are most
     frequently used when building Octave:

    `--help'
          Print a summary of the options recognized by the configure
          script.

    `--prefix=PREFIX'
          Install Octave in subdirectories below PREFIX.  The default
          value of PREFIX is `/usr/local'.

    `--srcdir=DIR'
          Look for Octave sources in the directory DIR.

    `--enable-64'
          This is an *experimental* option to enable Octave to use
          64-bit integers for array dimensions and indexing on 64-bit
          platforms.  You probably don't want to use this option unless
          you know what you are doing.  *Note Compiling Octave with
          64-bit Indexing::, for more details about building Octave
          with this option.

    `--enable-bounds-check'
          Enable bounds checking for indexing operators in the internal
          array classes.  This option is primarily used for debugging
          Octave.  Building Octave with this option has a negative
          impact on performance and is not recommended for general use.

    `--disable-docs'
          Disable building all forms of the documentation (Info, PDF,
          HTML).  The default is to build documentation, but your
          system will need functioning Texinfo and Tex installs for
          this to succeed.

    `--enable-float-truncate'
          This option allows for truncation of intermediate floating
          point results in calculations.  It is only necessary for
          certain platforms.

    `--enable-readline'
          Use the readline library to provide for editing of the
          command line in terminal environments.  This option is on by
          default.

    `--enable-shared'
          Create shared libraries (this is the default).  If you are
          planning to use the dynamic loading features, you will
          probably want to use this option.  It will make your `.oct'
          files much smaller and on some systems it may be necessary to
          build shared libraries in order to use dynamically linked
          functions.

          You may also want to build a shared version of `libstdc++',
          if your system doesn't already have one.

    `--enable-dl'
          Use `dlopen' and friends to make Octave capable of dynamically
          linking externally compiled functions (this is the default if
          `--enable-shared' is specified).  This option only works on
          systems that actually have these functions.  If you plan on
          using this feature, you should probably also use
          `--enable-shared' to reduce the size of your `.oct' files.

    `--with-blas=<lib>'
          By default, configure looks for the best BLAS matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned
          libraries.  (The use of an optimized BLAS will generally
          result in several-times faster matrix operations.)  Use this
          option to specify a particular BLAS library that Octave
          should use.

    `--with-lapack=<lib>'
          By default, configure looks for the best LAPACK matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned
          libraries.  (The use of an optimized LAPACK will generally
          result in several-times faster matrix operations.)  Use this
          option to specify a particular LAPACK library that Octave
          should use.

    `--with-magick=<lib>'
          Select the library to use for image I/O.  The two possible
          values are "GraphicsMagick" (default) or "ImageMagick".

    `--with-sepchar=<char>'
          Use <char> as the path separation character.  This option can
          help when running Octave on non-Unix systems.

    `--without-amd'
          Don't use AMD, disable some sparse matrix functionality.

    `--without-camd'
          Don't use CAMD, disable some sparse matrix functionality.

    `--without-colamd'
          Don't use COLAMD, disable some sparse matrix functionality.

    `--without-ccolamd'
          Don't use CCOLAMD, disable some sparse matrix functionality.

    `--without-cholmod'
          Don't use CHOLMOD, disable some sparse matrix functionality.

    `--without-curl'
          Don't use the cURL library, disable the ftp objects,
          `urlread' and `urlwrite' functions.

    `--without-cxsparse'
          Don't use CXSPARSE, disable some sparse matrix functionality.

    `--without-fftw3'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library.

    `--without-fftw3f'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library when operating on
          single precision (float) values.

    `--without-glpk'
          Don't use the GLPK library for linear programming.

    `--without-hdf5'
          Don't use the HDF5 library, disable reading and writing of
          HDF5 files.

    `--without-opengl'
          Don't use OpenGL, disable native graphics toolkit for
          plotting.  You will need `gnuplot' installed in order to make
          plots.

    `--without-qhull'
          Don't use Qhull, disable `delaunay', `convhull', and related
          functions.

    `--without-qrupdate'
          Don't use QRUPDATE, disable QR and Cholesky update functions.

    `--without-umfpack'
          Don't use UMFPACK, disable some sparse matrix functionality.

    `--without-zlib'
          Don't use the zlib library, disable data file compression and
          support for recent MAT file formats.

    `--without-framework-carbon'
          Don't use framework Carbon headers, libraries, or specific
          source code even if the configure test succeeds (the default
          is to use Carbon framework if available).  This is a platform
          specific configure option for Mac systems.

    `--without-framework-opengl'
          Don't use framework OpenGL headers, libraries, or specific
          source code even if the configure test succeeds.  If this
          option is given then OpenGL headers and libraries in standard
          system locations are tested (the default value is
          `--with-framework-opengl').  This is a platform specific
          configure option for Mac systems.


     See the file `INSTALL' for more general information about the
     command line options used by configure.  That file also contains
     instructions for compiling in a directory other than the one where
     the source is located.

   * Run make.

     You will need a recent version of GNU Make as Octave relies on
     certain features not generally available in all versions of make.
     Modifying Octave's makefiles to work with other make programs is
     probably not worth your time; instead, we simply recommend
     installing GNU Make.

     There are currently two options for plotting in Octave: (1) the
     external program gnuplot, or (2) the internal graphics engine
     using OpenGL and FLTK.  Gnuplot is a command-driven interactive
     function plotting program.  Gnuplot is copyrighted, but freely
     distributable.  As of Octave release 3.4, gnuplot is the default
     option for plotting.  But, the internal graphics engine is nearly
     100% compatible, certainly for most ordinary plots, and users are
     encouraged to test it.  It is anticipated that the internal engine
     will become the default option at the next major release of Octave.

     To compile Octave, you will need a recent version of `g++' or other
     ANSI C++ compiler.  In addition, you will need a Fortran 77
     compiler or `f2c'.  If you use `f2c', you will need a script like
     `fort77' that works like a normal Fortran compiler by combining
     `f2c' with your C compiler in a single script.

     If you plan to modify the parser you will also need GNU `bison' and
     `flex'.  If you modify the documentation, you will need GNU
     Texinfo.

     GNU Make, `gcc' (and `libstdc++'), `gnuplot', `bison', `flex', and
     Texinfo are all available from many anonymous ftp archives.  The
     primary site is `ftp.gnu.org', but it is often very busy.  A list
     of sites that mirror the software on `ftp.gnu.org' is available by
     anonymous ftp from `ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP'.

     Octave requires approximately 1.4 GB of disk storage to unpack and
     compile from source (significantly less, 400 MB, if you don't
     compile with debugging symbols).  To compile without debugging
     symbols try the command

          make CFLAGS=-O CXXFLAGS=-O LDFLAGS=

     instead of just `make'.

   * If you encounter errors while compiling Octave, first check the
     list of known problems below to see if there is a workaround or
     solution for your problem.  If not, see the file BUGS for
     information about how to report bugs.

   * Once you have successfully compiled Octave, run `make install'.

     This will install a copy of Octave, its libraries, and its
     documentation in the destination directory.  As distributed,
     Octave is installed in the following directories.  In the table
     below, PREFIX defaults to `/usr/local', VERSION stands for the
     current version number of the interpreter, and ARCH is the type of
     computer on which Octave is installed (for example,
     `i586-unknown-gnu').

    `PREFIX/bin'
          Octave and other binaries that people will want to run
          directly.

    `PREFIX/lib/octave-VERSION'
          Libraries like libcruft.a and liboctave.a.

    `PREFIX/octave-VERSION/include/octave'
          Include files distributed with Octave.

    `PREFIX/share'
          Architecture-independent data files.

    `PREFIX/share/man/man1'
          Unix-style man pages describing Octave.

    `PREFIX/share/info'
          Info files describing Octave.

    `PREFIX/share/octave/VERSION/m'
          Function files distributed with Octave.  This includes the
          Octave version, so that multiple versions of Octave may be
          installed at the same time.

    `PREFIX/libexec/octave/VERSION/exec/ARCH'
          Executables to be run by Octave rather than the user.

    `PREFIX/lib/octave/VERSION/oct/ARCH'
          Object files that will be dynamically loaded.

    `PREFIX/share/octave/VERSION/imagelib'
          Image files that are distributed with Octave.

1.1 Compiling Octave with 64-bit Indexing
=========================================

Note: the following only applies to systems that have 64-bit pointers.
Configuring Octave with `--enable-64' cannot magically make a 32-bit
system have a 64-bit address space.

   On 64-bit systems, Octave is limited to (approximately) the following
array sizes when using the default 32-bit indexing mode:

     double:         16GB
     single:          8GB
     uint64, int64:  16GB
     uint32, int32:   8GB
     uint16, int16:   4GB
     uint8, int8:     2GB

   In each case, the limit is really (approximately) 2^31 elements
because of the default type of the value used for indexing arrays
(signed 32-bit integer, corresponding to the size of a Fortran INTEGER
value).

   Trying to create larger arrays will produce the following error:

     octave:1> a = zeros (1024*1024*1024*3, 1, 'int8');
     error: memory exhausted or requested size too large
            for range of Octave's index type --
            trying to return to prompt

You will obtain this error even if your system has enough memory to
create this array (4 GB in the above case).

   To use arrays larger than 2 GB, Octave has to be configured with the
option `--enable-64'.  This option is experimental and you are
encouraged to submit bug reports if you find a problem.  With this
option, Octave will use 64-bit integers internally for array dimensions
and indexing.  However, all numerical libraries used by Octave will
*also* need to use 64-bit integers for array dimensions and indexing.
In most cases, this means they will need to be compiled from source
since most (all?) distributions which package these libraries compile
them with the default Fortran integer size, which is normally 32-bits
wide.

   The following instructions were tested with the development version
of Octave and GCC 4.3.4 on an x86_64 Debian system.

   The versions listed below are the versions used for testing.  If
newer versions of these packages are available, you should try to use
them, although there may be some differences.

   All libraries and header files will be installed in subdirectories of
`$prefix64' (you must choose the location of this directory).

   * BLAS and LAPACK (`http://www.netlib.org/lapack')

     Reference versions for both libraries are included in the reference
     LAPACK 3.2.1 distribution from `netlib.org'.

        - Copy the file `make.inc.example' and name it `make.inc'.  The
          options `-fdefault-integer-8' and `-fPIC' (on 64-bit CPU)
          have to be added to the variable `OPTS' and `NOOPT'.

        - Once you have compiled this library make sure that you use it
          for compiling Suite Sparse and Octave.  In the following we
          assume that you installed the LAPACK library as
          $prefix64/lib/liblapack.a.

   * QRUPDATE (`http://sourceforge.net/projects/qrupdate')

     In the `Makeconf' file:

        - Add `-fdefault-integer-8' to `FFLAGS'.

        - Adjust the BLAS and LAPACK variables as needed if your 64-bit
          aware BLAS and LAPACK libraries are in a non-standard
          location.

        - Set `PREFIX' to the top-level directory of your install tree.

        - Run `make solib' to make a shared library.

        - Run `make install' to install the library.

   * SuiteSparse (`http://www.cise.ufl.edu/research/sparse/SuiteSparse')

        - In `UFconfig/UFconfig.mk' use the following options for
          `CFLAGS' and `F77FLAGS':

               CC = gcc
               CFLAGS = -fPIC -O -DLP64 -DLONGBLAS='long int' -DLONG='long int'
               F77 = gfortran
               F77FLAGS = -fPIC -O -fdefault-integer-8
               BLAS = -L$BLAS/lib -lblas -lgfortran"
               LAPACK = -L$LAPACK/lib -llapack"

        - Disable the GPL-incompatible `METIS' library:

               CHOLMOD_CONFIG = -DNPARTITION
               SPQR_CONFIG = -DNPARTITION
               METIS_PATH =
               METIS =

        - Disable the `DI' versions of the `CHOLMOD' library files by
          setting

               OBJ = $(DL)

          in `CHOLMOD/Lib/Makefile'.

        - Disable the `DI' versions of the `CHOLMOD' tests by commenting
          out or deleting the following lines in
          `CHOLMOD/Demo/Makefile':

               ./cholmod_demo < Matrix/bcsstk01.tri
               ./cholmod_demo < Matrix/lp_afiro.tri
               ./cholmod_demo < Matrix/can___24.mtx
               ./cholmod_demo < Matrix/c.tri
               ./cholmod_simple < Matrix/c.tri
               ./cholmod_simple < Matrix/can___24.mtx
               ./cholmod_simple < Matrix/bcsstk01.tri

        - Run `make' to build the libraries.

        - The SuiteSparse `Makefile' does not have an install target so
          you must install the files by hand:

               mkdir $prefix64/include/suitesparse
               cp UFconfig/UFconfig.h $prefix64/include/suitesparse
               for d in AMD BTF CAMD CCOLAMD \
                        CHOLMOD COLAMD CXSparse UMFPACK; do
                 cp $d/Lib/lib*a $prefix64/lib
                 cp $d/Include/*h $prefix64/include/suitesparse
               done

        - You can generate shared versions of these libraries by doing
          the following in the `$prefix64/lib' directory:

               top=$(pwd)
               for f in *.a; do
                 mkdir tmp
                 cd tmp
                 ar vx ../$f
                 gcc -shared -o ../${f%%.a}.so *.o
                 cd $top
                 rm -rf tmp
               done


   * ATLAS instead of reference BLAS and LAPACK

     Suggestions on how to compile ATLAS would be most welcome.

   * GLPK

     Suggestions on how to compile GLPK would be most welcome.

   * Qhull (`http://www.qhull.org')

     Suggestions on how to compile Qhull would be most welcome.

   * Octave

     Octave's 64-bit index support is activated with the configure
     option `--enable-64'.

          ./configure \
            LD_LIBRARY_PATH="$prefix64/lib" \
            CPPFLAGS="-I$prefix64/include" LDFLAGS="-L$prefix64/lib" \
            --enable-64

     You must ensure that all Fortran sources except those in the
     `libcruft/ranlib' directory are compiled such that INTEGERS are
     8-bytes wide.  If you are using gfortan, the configure script
     should automatically set the Makefile variable
     `F77_INTEGER_8_FLAG' to `-fdefault-integer-8'.  If you are using
     another compiler, you must set this variable yourself.  You should
     NOT set this flag in `FFLAGS', otherwise the files in
     `libcruft/ranlib' will be miscompiled.

   * Other dependencies

     Probably nothing special needs to be done for the following
     dependencies.  If you discover that something does need to be done,
     please submit a bug report.

        - pcre

        - zlib

        - hdf5

        - fftw3

        - cURL

        - GraphicsMagick++

        - OpenGL

        - freetype

        - fontconfig

        - fltk


1.2 Installation Problems
=========================

This section contains a list of problems (and some apparent problems
that don't really mean anything is wrong) that may show up during
installation of Octave.

   * On some SCO systems, `info' fails to compile if `HAVE_TERMIOS_H'
     is defined in `config.h'.  Simply removing the definition from
     `info/config.h' should allow it to compile.

   * If `configure' finds `dlopen', `dlsym', `dlclose', and `dlerror',
     but not the header file `dlfcn.h', you need to find the source for
     the header file and install it in the directory `usr/include'.
     This is reportedly a problem with Slackware 3.1.  For Linux/GNU
     systems, the source for `dlfcn.h' is in the `ldso' package.

   * Building `.oct' files doesn't work.

     You should probably have a shared version of `libstdc++'.  A patch
     is needed to build shared versions of version 2.7.2 of `libstdc++'
     on the HP-PA architecture.  You can find the patch at
     `ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix'.

   * On some DEC alpha systems there may be a problem with the `libdxml'
     library, resulting in floating point errors and/or segmentation
     faults in the linear algebra routines called by Octave.  If you
     encounter such problems, then you should modify the configure
     script so that `SPECIAL_MATH_LIB' is not set to `-ldxml'.

   * On FreeBSD systems Octave may hang while initializing some internal
     constants.  The fix appears to be to use

          options      GPL_MATH_EMULATE

     rather than

          options      MATH_EMULATE

     in the kernel configuration files (typically found in the directory
     `/sys/i386/conf'.  After making this change, you'll need to rebuild
     the kernel, install it, and reboot.

   * If you encounter errors like

          passing `void (*)()' as argument 2 of
            `octave_set_signal_handler(int, void (*)(int))'

     or

          warning: ANSI C++ prohibits conversion from `(int)'
                   to `(...)'

     while compiling `sighandlers.cc', you may need to edit some files
     in the `gcc' include subdirectory to add proper prototypes for
     functions there.  For example, Ultrix 4.2 needs proper
     declarations for the `signal' function and the `SIG_IGN' macro in
     the file `signal.h'.

     On some systems the `SIG_IGN' macro is defined to be something
     like this:

          #define  SIG_IGN  (void (*)())1

     when it should really be something like:

          #define  SIG_IGN  (void (*)(int))1

     to match the prototype declaration for the `signal' function.  This
     change should also be made for the `SIG_DFL' and `SIG_ERR'
     symbols.  It may be necessary to change the definitions in
     `sys/signal.h' as well.

     The `gcc' `fixincludes' and `fixproto' scripts should probably fix
     these problems when `gcc' installs its modified set of header
     files, but I don't think that's been done yet.

     *You should not change the files in `/usr/include'*.  You can find
     the `gcc' include directory tree by running the command

          gcc -print-libgcc-file-name

     The directory of `gcc' include files normally begins in the same
     directory that contains the file `libgcc.a'.

   * Some of the Fortran subroutines may fail to compile with older
     versions of the Sun Fortran compiler.  If you get errors like

          zgemm.f:
                  zgemm:
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 245: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 304: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 327: warning: unexpected parent of complex
            expression subtree
          pcc_binval: missing IR_CONV in complex op
          make[2]: *** [zgemm.o] Error 1

     when compiling the Fortran subroutines in the `libcruft'
     subdirectory, you should either upgrade your compiler or try
     compiling with optimization turned off.

   * On NeXT systems, if you get errors like this:

          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBB7656
          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBE7656

     when compiling `Array.cc' and `Matrix.cc', try recompiling these
     files without `-g'.

   * Some people have reported that calls to shell_cmd and the pager do
     not work on SunOS systems.  This is apparently due to having
     `G_HAVE_SYS_WAIT' defined to be 0 instead of 1 when compiling
     `libg++'.

   * On NeXT systems, linking to `libsys_s.a' may fail to resolve the
     following functions

          _tcgetattr
          _tcsetattr
          _tcflow

     which are part of `libposix.a'.  Unfortunately, linking Octave with
     `-posix' results in the following undefined symbols.

          .destructors_used
          .constructors_used
          _objc_msgSend
          _NXGetDefaultValue
          _NXRegisterDefaults
          .objc_class_name_NXStringTable
          .objc_class_name_NXBundle

     One kluge around this problem is to extract `termios.o' from
     `libposix.a', put it in Octave's `src' directory, and add it to
     the list of files to link together in the makefile.  Suggestions
     for better ways to solve this problem are welcome!

   * If Octave crashes immediately with a floating point exception, it
     is likely that it is failing to initialize the IEEE floating point
     values for infinity and NaN.

     If your system actually does support IEEE arithmetic, you should
     be able to fix this problem by modifying the function
     `octave_ieee_init' in the file `lo-ieee.cc' to correctly
     initialize Octave's internal infinity and NaN variables.

     If your system does not support IEEE arithmetic but Octave's
     configure script incorrectly determined that it does, you can work
     around the problem by editing the file `config.h' to not define
     `HAVE_ISINF', `HAVE_FINITE', and `HAVE_ISNAN'.

     In any case, please report this as a bug since it might be
     possible to modify Octave's configuration script to automatically
     determine the proper thing to do.

   * If Octave is unable to find a header file because it is installed
     in a location that is not normally searched by the compiler, you
     can add the directory to the include search path by specifying
     (for example) `CPPFLAGS=-I/some/nonstandard/directory' as an
     argument to `configure'.  Other variables that can be specified
     this way are `CFLAGS', `CXXFLAGS', `FFLAGS', and `LDFLAGS'.
     Passing them as options to the configure script also records them
     in the `config.status' file.  By default, `CPPFLAGS' and `LDFLAGS'
     are empty, `CFLAGS' and `CXXFLAGS' are set to `"-g -O"' and
     `FFLAGS' is set to `"-O"'.


